syntax = "proto3";

package raft.leader_election;


message LogEntry {
  int32 term = 1;
  string command = 2;
  int64 client_id = 3;
  int64 request_id = 4;
}

message RequestVote {
  int32 term = 1;
  string candidate_id = 2; // IP:port of the candidate
  // following the spec in the paper
  int32 last_log_index = 3;
  int32 last_log_term = 4;
  bool is_petition = 5; // true if this is a petition
}

message VoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
}

// following the spec in the raft paper
message AppendEntries {
  int32 term = 1;
  string leader_id = 2; // IP:port of the leader
  int32 prev_log_index = 3;
  int32 prev_log_term = 4;
  repeated LogEntry entries = 5;
  int32 leader_commit = 6;
  // not in the paper but for experiment purpose
  int32 id = 7; // id of the heartbeat/log entry
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
  // the highest log index that the follower has seen and replicated (not committed)
  int32 match_index = 3;
  // these may not be needed, but included for now
  int32 conflict_index = 4;
  int32 conflict_term = 5;  
}

// InstallSnapshot RPC: used when a follower is too far behind.
message InstallSnapshot {
  int32 term = 1;
  string leader_id = 2;
  int32 last_included_index = 3;
  int32 last_included_term = 4;
  int32 offset = 5;
  bytes data = 6;
  bool done = 7;
}


// InstallSnapshotResponse RPC.
message InstallSnapshotResponse {
  int32 term = 1;
}

message PenaltyScore {
  int32 term = 1;
  string node_id = 2; // IP:port of the node
  double penalty_score = 3;
}

message Petition {
  int32 term = 1;
  string current_leader = 2;      // IP:port of the current leader
  string proposed_leader = 3;     // IP:port of the proposed new leader
  double latency_to_leader = 4;   // Latency from sender to current leader
  string sender_id = 5;           // IP:port of the sender
}



message MessageWrapper {
  enum MessageType {
    REQUEST_VOTE = 0;
    VOTE_RESPONSE = 1;
    APPEND_ENTRIES = 2;
    APPEND_ENTRIES_RESPONSE = 3;
    PENALTY_SCORE = 4;
    PETITION = 5;
    CLIENT_REQUEST = 6;
  }
  MessageType type = 1;
  bytes payload = 2;
}
